"""
Script to convert networks from PyPSA-Eur-Sec v0.5.0 to data format used in the
IAMC database
"""


import pypsa
import openpyxl
import pandas as pd

#original IAMC file, official template
path = "IAMC_format.xlsx"
#use the official template

model = "PyPSA-Eur-Sec 0.5.0"
scenarios ={'1.5C carbon budget':'25.7','2.0C carbon budget':'73.9'}  #defines carbon budget for each scenario
years = [2020, 2030, 2050]  
sheets={"installed_capacity":0,"fuel_consumption_supply":1,"Emissions_supply":2,"Yearly_generation_supply":3,\
"Winter_peak_generation":4,"summer_peak_generation":5,"Percentile50_generation":6,"Percentile25_generation":7,"Investments":8,\
"Demand_final_energy":9,"Demand_emissions":10,"Percentile_25_consumpt":11,"Percentile_50_consumpt":12,"Summer_peak_consumpt":13,\
"Winter_peak_consumpt":14,"Efficiency_demand":15,"Efficiency_supply":16,"Other_variables":17}

summer_i='2013-06-01 00:00:00'
summer_e='2013-08-31 23:00:00'
winter_i='2013-12-01 00:00:00'
winter_e='2013-12-31 23:00:00'
winter_ii='2013-01-01 00:00:00'
winter_ee='2013-02-28 23:00:00'

def time(series) :
 if 'Winter'in sheet  :
  a=pd.Series(series[winter_i:winter_e])
  b=pd.Series(series[winter_ii:winter_ee])
  return pd.concat([a,b])
 if 'ummer' in sheet :
  return pd.Series(series[summer_i:summer_e]) 
 else :
  return series     
def gen_des(series) :
 if 'peak' in sheet :
  return series.max()
 if 'Percentile' in sheet and '50' in sheet:
  return series.quantile(0.5)
 if 'Percentile' in sheet and '25' in sheet :
  return series.quantile(0.25)
 else :
  return series.sum()

for scenario in scenarios:
    #one excel file per scenario
    file = openpyxl.load_workbook(path)
    for year in years:
        
        n=pypsa.Network('postnetworks/elec_s370_37m_lv1.0__3H-T-H-B-I-solar+p3-dist1-cb{}ex0_{}.nc'.format(scenarios[scenario],year))
        costs = pd.read_csv("costs/costs_{}.csv".format(year), index_col=[0,1])
        year_sub=2015 if year==years[0] else year
        countries=list(set(n.buses['country']))
        countries.remove('')
        countries.insert(0,'EU')
        EU = [country for country in countries if country not in ('NO','BA','ME','MK','RS','AL','CH')]  #EU25+UK (EU25=EU27-Malta and cyprus not in model)
        ds_eu=[]
        
        for country in countries:
            ds=[]
            var=[]
            for sheet in sheets.keys() :
              if year == 2020:
                #one datasheet per country including information from different years
                target = file.copy_worksheet(file[sheet])
                target.title =sheet +' '+str(country)
              if country is 'EU' :  #seperate worksheet for EU so other velues could be added as the program runs
                ds_eu.append(file[sheet +' '+str(country)])  
              ds.append(file[sheet +' '+str(country)])  #set of worksheets for each country that is replaced each loop
              var.append({}) 
            
            ###Electric capcaties (MW -> GW)
            sh=sheets['installed_capacity']  #first sheet
            
            #Capacity : Solar PV (rooftop, ground)   
            
            var[sh]['Installed capacity|Electricity|Solar|Rooftop PV'] = 0.001*n.generators.p_nom_opt.filter(like ='solar rooftop').filter(like =country).sum()
            var[sh]['Installed capacity|Heat|Solar'] = 0.001*n.generators.p_nom_opt.filter(like ='solar thermal').filter(like =country).sum()
            var[sh]['Installed capacity|Electricity|Solar|Open field'] = 0.001*n.generators.p_nom_opt.filter(like ='solar').filter(like =country).sum()\
            -var[sh]['Installed capacity|Heat|Solar']-var[sh]['Installed capacity|Electricity|Solar|Rooftop PV']
            var[sh]['Installed capacity|Electricity|Solar'] =var[sh]['Installed capacity|Electricity|Solar|Open field']+var[sh]['Installed capacity|Electricity|Solar|Rooftop PV']
            
            #Capacity :  onshore and offshore wind   
            
            var[sh]['Installed capacity|Electricity|Wind|Onshore']=0.001*n.generators.p_nom_opt.filter(like ='onwind').filter(like =country).sum() 
            var[sh]['Installed capacity|Electricity|Wind|Offshore']=0.001*n.generators.p_nom_opt.filter(like ='offwind').filter(like =country).sum() 
            var[sh]['Installed capacity|Electricity|Wind']=var[sh]['Installed capacity|Electricity|Wind|Onshore']+var[sh]['Installed capacity|Electricity|Wind|Offshore']
            
            #Capacity : Nuclear
            
            var[sh]['Installed capacity|Electricity|Nuclear'] =0.001*((n.links.efficiency.filter(like ='nuclear').filter(like =country)
                 *n.links.p_nom_opt.filter(like ='nuclear').filter(like =country)).sum())
          

            #Capacity :  Coal (Lignite)        
                                                           
            var[sh]['Installed capacity|Electricity|Coal|Brown Coal|Lignite'] = 0.001*((n.links.efficiency.filter(like ='lignite').filter(like =country)
                 *n.links.p_nom_opt.filter(like ='lignite').filter(like =country)).sum())
            var[sh]['Installed capacity|Electricity|Coal|Brown Coal'] =var[sh]['Installed capacity|Electricity|Coal|Brown Coal|Lignite'] 
            
            var[sh]['Installed capacity|Electricity|Coal'] = 0.001*((n.links.efficiency.filter(like ='coal').filter(like =country)
                *n.links.p_nom_opt.filter(like ='coal').filter(like =country)).sum())+ var[sh]['Installed capacity|Electricity|Coal|Brown Coal']                                                    

            #Capacity : Natural gas(OCGT, CCGT, CHP, CHP CC)       
                                                                 
            var[sh]['Installed capacity|Electricity|Gases|Fossil|Natural gas'] = 0.001*((n.links.efficiency.filter(like ='gas CHP').filter(like =country)
                 *n.links.p_nom_opt.filter(like ='gas CHP').filter(like =country)).sum())
            var[sh]['Installed capacity|Electricity|Gases|Fossil|Natural gas'] += 0.001*((n.links.efficiency.filter(like ='OCGT').filter(like =country)
                 *n.links.p_nom_opt.filter(like ='OCGT').filter(like =country)).sum())
            var[sh]['Installed capacity|Electricity|Gases|Fossil|Natural gas'] += 0.001*((n.links.efficiency.filter(like ='CCGT').filter(like =country)
                 *n.links.p_nom_opt.filter(like ='CCGT').filter(like =country)).sum())
            
            var[sh]['Installed capacity|Electricity|Gases|Fossil|Natural gas|CCS'] = 0.001*((n.links.efficiency.filter(like ='gas CHP CC').filter(like =country)
                 *n.links.p_nom_opt.filter(like ='gas CHP CC').filter(like =country)).sum())
            
            #Capacity :Biomass (CCS)
                                                                 
            var[sh]['Installed capacity|Electricity|Solid bio and waste|Primary solid biomass'] = 0.001*((n.links.efficiency.filter(like ='solid biomass CHP').filter(like =country)
                 *n.links.p_nom_opt.filter(like ='solid biomass CHP').filter(like =country)).sum()) 
            var[sh]['Installed capacity|Electricity|Solid bio and waste'] = var[sh]['Installed capacity|Electricity|Solid bio and waste|Primary solid biomass']
            var[sh]['Installed capacity|Electricty|Biomass'] = var[sh]['Installed capacity|Electricity|Solid bio and waste']
            
            var[sh]['Installed capacity|Electricity|Solid bio and waste|Primary solid biomass|CCS'] = 0.001*((n.links.efficiency.filter(like ='solid biomass CHP CC').filter(like =country)
                 *n.links.p_nom_opt.filter(like ='solid biomass CHP CC').filter(like =country)).sum())            
            var[sh]['Installed capacity|Electricity|Solid bio and waste|CCS'] = var[sh]['Installed capacity|Electricity|Solid bio and waste|Primary solid biomass|CCS']
            var[sh]['Installed capacity|Electricty|Biomass|CCS'] = var[sh]['Installed capacity|Electricity|Solid bio and waste|CCS']            
           
            #Capacity : Hydrogen
            
            var[sh]['Installed capacity|Electricity|Gases|Hydrogen'] = 0.001*((n.links.efficiency.filter(like ='H2 Fuel Cell').filter(like =country)
                 *n.links.p_nom_opt.filter(like ='H2 Fuel Cell').filter(like =country)).sum())

            #Capacity : Oil 

            var[sh]['Installed capacity|Electricity|Liquids|Fossil'] = 0.001*((n.links.efficiency.filter(like ='oil-').filter(like =country)
                 *n.links.p_nom_opt.filter(like ='oil-').filter(like =country)).sum())

            #Capacity : Power to gas 
            
            var[sh]['Installed capacity|P2G|Electricity'] = 0.001*((n.links.efficiency.filter(like ='Sabatier').filter(like =country)
                 *n.links.p_nom_opt.filter(like ='Sabatier').filter(like =country)).sum()+ 
                 (n.links.efficiency.filter(like ='helmeth').filter(like =country)*n.links.p_nom_opt.filter(like ='helmeth').filter(like =country)).sum()+ 
                 (n.links.efficiency.filter(like ='H2 Electrolysis').filter(like =country)*n.links.p_nom_opt.filter(like ='H2 Electrolysis').filter(like =country)).sum()+
                 (n.links.efficiency.filter(like ='Fischer-Tropsch').filter(like =country)*n.links.p_nom_opt.filter(like ='Fischer-Tropsch').filter(like =country)).sum()) 
            
            #Capacity : hydro (reservoir, ror)

            var[sh]['Installed capacity|Electricity|Hydro|river'] = 0.001*n.generators.p_nom_opt.filter(like ='ror').filter(like =country).sum()
            var[sh]['Installed capacity|Electricity|Hydro|dam'] = 0.001*n.storage_units.p_nom_opt.filter(like ='hydro').filter(like =country).sum()
            var[sh]['Installed capacity|Electricity|Hydro'] = var[sh]['Installed capacity|Electricity|Hydro|river']+var[sh]['Installed capacity|Electricity|Hydro|dam']
           
            
            #Capacity : storage (PHS, battery, H2 storage)
            
            var[sh]['Installed capacity|Flexibility|Electricity Storage|Medium duration'] = 0.001*((n.storage_units.p_nom_opt.filter(like ='PHS').filter(like =country).sum()
             +n.stores.e_nom_opt.filter(like ='H2').filter(like =country)).sum())
            
            var[sh]['Installed capacity|Flexibility|Electricity Storage|Short duration'] = 0.001*((n.stores.e_nom_opt.filter(like ='battery').filter(like =country)
             +n.stores.e_nom_opt.filter(like ='Li ion').filter(like =country)).sum())
            
            var[sh]['Installed capacity|Flexibility|Electricity Storage'] =  var[sh]['Installed capacity|Flexibility|Electricity Storage|Medium duration']+\
            var[sh]['Installed capacity|Flexibility|Electricity Storage|Short duration']
            
            #Capacity : Interconnect 
            
            var[sh]['Installed capacity|Flexibility|Interconnect Importing Capacity'] = 0.001*((n.lines.s_nom_opt[[i for i in n.lines.index if country in n.lines.bus0[i]or country in n.lines.bus1[i]]]).sum()
            +(n.links.p_nom_opt[[i for i in n.links.index if 'DC' in n.links.carrier[i] and ((country in n.links.bus0[i]) is not (country in n.links.bus1[i]))]]).sum())
                      
               
                
            ### Heat capcaties (MW -> GW)
            
            #Capacity :Biomass (CCS)

            var[sh]['Installed capacity|Heat|Biomass'] = 0.001*((n.links.efficiency2.filter(like ='solid biomass CHP').filter(like =country)
                 *n.links.p_nom_opt.filter(like ='solid biomass CHP').filter(like =country)).sum())
            var[sh]['Installed capacity|Heat|Solid bio and waste'] = var[sh]['Installed capacity|Heat|Biomass']  
            var[sh]['Installed capacity|Heat|Solid bio and waste|Primary solid biomass'] = var[sh]['Installed capacity|Heat|Solid bio and waste']  
            
            var[sh]['Installed capacity|Heat|Biomass|CCS'] = 0.001*((n.links.efficiency2.filter(like ='solid biomass CHP CC').filter(like =country)
                 *n.links.p_nom_opt.filter(like ='solid biomass CHP CC').filter(like =country)).sum())
            var[sh]['Installed capacity|Heat|Solid bio and waste|CCS'] = var[sh]['Installed capacity|Heat|Biomass|CCS']  
            var[sh]['Installed capacity|Heat|Solid bio and waste|Primary solid biomass|CCS'] = var[sh]['Installed capacity|Heat|Solid bio and waste|CCS']  
          
            #Capacity :Electricity (Resistive heater, heat pump)
            
            var[sh]['Installed capacity|Heat|Electricity|Direct'] = 0.001*((n.links.efficiency.filter(like ='resistive heater').filter(like =country)
                 *n.links.p_nom_opt.filter(like ='resistive heater').filter(like =country)).sum())
            var[sh]['Installed capacity|Heat|Electricity|Heat pump'] = 0.001*((n.links_t.efficiency.filter(like ='heat pump').filter(like =country).mean()
                 *n.links.p_nom_opt.filter(like ='heat pump').filter(like =country)).sum())
            var[sh]['Installed capacity|Heat|Electricity']=var[sh]['Installed capacity|Heat|Electricity|Direct']+var[sh]['Installed capacity|Heat|Electricity|Heat pump']

            #Capacity :Natural gas

            var[sh]['Installed capacity|Heat|Gases|Fossil|Natural Gas'] = 0.001*((n.links.efficiency2.filter(like ='gas CHP').filter(like =country)
                 *n.links.p_nom_opt.filter(like ='gas CHP').filter(like =country)).sum())            
            var[sh]['Installed capacity|Heat|Gases|Fossil|Natural Gas'] += 0.001*((n.links.efficiency.filter(like ='gas boiler').filter(like =country)
                 *n.links.p_nom_opt.filter(like ='gas boiler').filter(like =country)).sum())
            
            var[sh]['Installed capacity|Heat|Gases|Fossil|Natural Gas|CCS'] = 0.001*((n.links.efficiency2.filter(like ='gas CHP CC').filter(like =country)
                 *n.links.p_nom_opt.filter(like ='gas CHP CC').filter(like =country)).sum())            
            
            #Capacity :Hydrogen
            
            var[sh]['Installed capacity|Heat|Gases|Hydrogen'] = 0.001*((n.links.efficiency2.filter(like ='H2 Fuel Cell').filter(like =country)
                 *n.links.p_nom_opt.filter(like ='H2 Fuel Cell').filter(like =country)).sum())  
           
           
            #Capacity : Oil
 
            var[sh]['Installed capacity|Heat|Liquids|Fossil'] = 0.001*((n.links.efficiency.filter(like ='oil boiler').filter(like =country)
                 *n.links.p_nom_opt.filter(like ='oil boiler').filter(like =country)).sum()) 
            
                                                
            # Hydrogen capcaties 

            var[sh]['Installed capacity|Hydrogen|Electricity'] = 0.001*((n.links.efficiency.filter(like ='H2 Electrolysis').filter(like =country)
                 *n.links.p_nom_opt.filter(like ='H2 Electrolysis').filter(like =country)).sum())    
                  
            var[sh]['Installed capacity|Hydrogen|Gasses|Fossil|Natural gas|CCS'] = 0.001*((n.links.efficiency.filter(like ='SMR CC').filter(like =country)
                 *n.links.p_nom_opt.filter(like ='SMR CC').filter(like =country)).sum())                                                                       

            var[sh]['Installed capacity|Hydrogen|Gasses|Fossil|Natural gas'] = 0.001*((n.links.efficiency.filter(like ='SMR').filter(like =country)
                 *n.links.p_nom_opt.filter(like ='SMR').filter(like =country)).sum())               
                  
            var[sh]['Installed capacity|Hydrogen'] = var[sh]['Installed capacity|Hydrogen|Electricity']+\
            var[sh]['Installed capacity|Hydrogen|Gasses|Fossil|Natural gas']+ var[sh]['Installed capacity|Hydrogen|Gasses|Fossil|Natural gas|CCS']
                  
                
            ### Fuel consumption (TJ/year)
            sh=sheets['fuel_consumption_supply']  
            ct=3*3.6e-3    #convert MWh to TJ
            
            ## For Electricity      
            #Fuel : Nuclear
            
            var[sh]['Fuel consumption|Electricity|Nuclear'] =0.001*ct*(n.links_t.p0.filter(like ='nuclear').filter(like =country)).sum().sum()
          
            #Fuel :  Coal (Lignite)        
                                                           
            var[sh]['Fuel consumption|Electricity|Coal|Brown Coal|Lignite'] = 0.001*ct*(n.links_t.p0.filter(like ='lignite').filter(like =country)).sum().sum()
            var[sh]['Fuel consumption|Electricity|Coal|Brown Coal'] =var[sh]['Fuel consumption|Electricity|Coal|Brown Coal|Lignite'] 
            
            var[sh]['Fuel consumption|Electricity|Coal'] = 0.001*ct*(n.links_t.p0.filter(like ='coal').filter(like =country)).sum().sum() + var[sh]['Fuel consumption|Electricity|Coal|Brown Coal']                                                    

            #Fuel : Natural gas(OCGT, CCGT, CHP, CHP CC)       
                                                                 
            var[sh]['Fuel consumption|Electricity|Gases|Fossil|Natural gas'] = 0.001*ct* (n.links_t.p0.filter(like ='OCGT').filter(like =country)).sum().sum()
            var[sh]['Fuel consumption|Electricity|Gases|Fossil|Natural gas'] += 0.001*ct*(n.links_t.p0.filter(like ='CCGT').filter(like =country)).sum().sum()
            
            #CHP fuels calculated bsed on share of ele. and heat
            
            var[sh]['Fuel consumption|Electricity|Gases|Fossil|Natural gas'] += 0.001*ct*(n.links_t.p0.filter(like ='gas CHP').filter(like =country).sum().sum()
              *n.links_t.p1.filter(like ='gas CHP').filter(like =country).sum().sum()             
               /(n.links_t.p1.filter(like ='gas CHP').filter(like =country).sum().sum()+n.links_t.p2.filter(like ='gas CHP').filter(like =country).sum().sum())) 
            
            var[sh]['Fuel consumption|Electricity|Gases|Fossil|Natural gas|CCS'] = 0.001*ct*(n.links_t.p0.filter(like ='gas CHP CC').filter(like =country).sum().sum()
              *n.links_t.p1.filter(like ='gas CHP CC').filter(like =country).sum().sum()            
               /(n.links_t.p1.filter(like ='gas CHP CC').filter(like =country).sum().sum()+n.links_t.p2.filter(like ='gas CHP CC').filter(like =country).sum().sum()))
            
            #Fuel :Biomass (CCS)
                                                                 
            var[sh]['Fuel consumption|Electricity|Solid bio and waste|Primary solid biomass'] = 0.001*ct*(n.links_t.p0.filter(like ='solid biomass CHP').filter(like =country).sum().sum()
              *n.links_t.p1.filter(like ='solid biomass CHP').filter(like =country).sum().sum()            
               /(n.links_t.p1.filter(like ='solid biomass CHP').filter(like =country).sum().sum()+n.links_t.p2.filter(like ='solid biomass CHP').filter(like =country).sum().sum()))
            var[sh]['Fuel consumption|Electricity|Solid bio and waste'] = var[sh]['Fuel consumption|Electricity|Solid bio and waste|Primary solid biomass']
            var[sh]['Fuel consumption|Electricty|Biomass'] = var[sh]['Fuel consumption|Electricity|Solid bio and waste']
            
            var[sh]['Fuel consumption|Electricity|Solid bio and waste|Primary solid biomass|CCS'] = 0.001*ct*(n.links_t.p0.filter(like ='solid biomass CHP CC').filter(like =country).sum().sum()
              *n.links_t.p1.filter(like ='solid biomass CHP CC').filter(like =country).sum().sum()            
               /(n.links_t.p1.filter(like ='solid biomass CHP CC').filter(like =country).sum().sum()+n.links_t.p2.filter(like ='solid biomass CHP CC').filter(like =country).sum().sum()))            
            var[sh]['Fuel consumption|Electricity|Solid bio and waste|CCS'] = var[sh]['Fuel consumption|Electricity|Solid bio and waste|Primary solid biomass|CCS']
            var[sh]['Fuel consumption|Electricty|Biomass|CCS'] = var[sh]['Fuel consumption|Electricity|Solid bio and waste|CCS']            
           
            #Fuel : Hydrogen
            
            var[sh]['Fuel consumption|Electricity|Gases|Hydrogen'] = 0.001*ct*(n.links_t.p0.filter(like ='H2 Fuel Cell').filter(like =country)).sum().sum()

            #Fuel : Oil 

            var[sh]['Fuel consumption|Electricity|Liquids|Fossil'] = 0.001*ct*(n.links_t.p0.filter(like ='oil-').filter(like =country)).sum().sum()
            
                
            ## For Heat
            #Fuel :Biomass (CCS)

            var[sh]['Fuel consumption|Heat|Biomass'] = (0.001*ct*(n.links_t.p0.filter(like ='solid biomass CHP').filter(like =country)).sum().sum()
               -var[sh]['Fuel consumption|Electricty|Biomass'])
            var[sh]['Fuel consumption|Heat|Solid bio and waste'] = var[sh]['Fuel consumption|Heat|Biomass']  
            var[sh]['Fuel consumption|Heat|Solid bio and waste|Primary solid biomass'] = var[sh]['Fuel consumption|Heat|Solid bio and waste']  
            
            var[sh]['Fuel consumption|Heat|Biomass|CCS'] = (0.001*ct*(n.links_t.p0.filter(like ='solid biomass CHP CC').filter(like =country)).sum().sum()
               -var[sh]['Fuel consumption|Electricty|Biomass|CCS'])
            var[sh]['Fuel consumption|Heat|Solid bio and waste|CCS'] = var[sh]['Fuel consumption|Heat|Biomass|CCS']  
            var[sh]['Fuel consumption|Heat|Solid bio and waste|Primary solid biomass|CCS'] = var[sh]['Fuel consumption|Heat|Solid bio and waste|CCS']  


            #Fuel :Natural gas

            var[sh]['Fuel consumption|Heat|Gases|Fossil|Natural Gas'] = 0.001*ct* (n.links_t.p0.filter(like ='gas boiler').filter(like =country)).sum().sum()
            var[sh]['Fuel consumption|Heat|Gases|Fossil|Natural Gas'] += (0.001*ct*(n.links_t.p0.filter(like ='gas CHP').filter(like =country)).sum().sum()
              -var[sh]['Fuel consumption|Electricity|Gases|Fossil|Natural gas'])
            var[sh]['Fuel consumption|Heat|Gases|Fossil|Natural Gas|CCS'] = (0.001*ct*(n.links_t.p0.filter(like ='gas CHP CC').filter(like =country)).sum().sum() 
              -var[sh]['Fuel consumption|Electricity|Gases|Fossil|Natural gas|CCS'])
                        
            #Fuel : Oil
 
            var[sh]['Fuel consumption|Heat|Liquids|Fossil'] = 0.001*ct*(n.links_t.p0.filter(like ='oil boiler').filter(like =country)).sum().sum()       
            
        
        
            ### Emissions (TJ/year)
            sh=sheets['Emissions_supply'] 
            ct=3e-6    #convert t CO2 to Mt CO2 (Co2 intensity: MWh-th ?)
                  
            #Emissions :  Coal (Lignite)        
                                                           
            var[sh]['Emissions|Kyoto gases|Fossil|CO2|Electricity|Coal|Brown Coal|Lignite'] = 0.001*ct*(n.links_t.p2.filter(like ='lignite').filter(like =country)).sum().sum()
            var[sh]['Emissions|Kyoto gases|Fossil|CO2|Electricity|Coal|Brown Coal'] =var[sh]['Emissions|Kyoto gases|Fossil|CO2|Electricity|Coal|Brown Coal|Lignite'] 
            
            var[sh]['Emissions|Kyoto gases|Fossil|CO2|Electricity|Coal'] = 0.001*ct*(n.links_t.p2.filter(like ='coal').filter(like =country)).sum().sum() + var[sh]['Emissions|Kyoto gases|Fossil|CO2|Electricity|Coal|Brown Coal']                                                    

            #Emissions : Natural gas(OCGT, CCGT, CHP, CHP CC, SMR, SMR CC)       
                                                                 
            var[sh]['Emissions|Kyoto gases|Fossil|CO2|Electricity|Gases|Fossil|Natural gas'] = 0.001*ct*(n.links_t.p3.filter(like ='gas CHP').filter(like =country)).sum().sum()
            var[sh]['Emissions|Kyoto gases|Fossil|CO2|Electricity|Gases|Fossil|Natural gas|CCS'] = 0.001*ct*(n.links_t.p3.filter(like ='gas CHP CC').filter(like =country)).sum().sum()
            
            var[sh]['Emissions|Kyoto gases|Fossil|CO2|Electricity|Gases|Fossil|Natural gas'] += 0.001*ct* (n.links_t.p2.filter(like ='OCGT').filter(like =country)).sum().sum()
            var[sh]['Emissions|Kyoto gases|Fossil|CO2|Electricity|Gases|Fossil|Natural gas'] += 0.001*ct*(n.links_t.p2.filter(like ='CCGT').filter(like =country)).sum().sum()
            
            var[sh]['Emissions|Kyoto gases|Fossil|CO2|Hydrogen|Gasses|Fossil|Natural gas'] = 0.001*ct*(n.links_t.p2.filter(like ='SMR').filter(like =country)).sum().sum()
            var[sh]['Emissions|Kyoto gases|Fossil|CO2|Hydrogen|Gasses|Fossil|Natural gas|CCS'] = 0.001*ct*(n.links_t.p2.filter(like ='SMR CC').filter(like =country)).sum().sum()
            
            
            #Emissions :Biomass (CCS)
            
            var[sh]['Emissions|Kyoto gases|Fossil|CO2|Electricity|Solid bio and waste|Primary solid biomass|CCS'] = 0.001*ct*(n.links_t.p0.filter(like ='solid biomass CHP CC').filter(like =country)).sum().sum()            
            var[sh]['Emissions|Kyoto gases|Fossil|CO2|Electricity|Solid bio and waste|CCS'] = var[sh]['Emissions|Kyoto gases|Fossil|CO2|Electricity|Solid bio and waste|Primary solid biomass|CCS']
            var[sh]['Emissions|Kyoto gases|Fossil|CO2|Electricty|Biomass|CCS'] = var[sh]['Emissions|Kyoto gases|Fossil|CO2|Electricity|Solid bio and waste|CCS']                        

            #Emissions : Oil 

            var[sh]['Emissions|Kyoto gases|Fossil|CO2|Electricity|Liquids|Fossil'] = 0.001*ct*(n.links_t.p0.filter(like ='oil-').filter(like =country)).sum().sum()
            
                
            ### Heat capcaties (MW -> GW)
            
            #Emissions :Biomass (CCS)

            var[sh]['Emissions|Kyoto gases|Fossil|CO2|Heat|Biomass|CCS'] = 0.001*ct*(n.links_t.p2.filter(like ='solid biomass CHP CC').filter(like =country)).sum().sum()
            var[sh]['Emissions|Kyoto gases|Fossil|CO2|Heat|Solid bio and waste|CCS'] = var[sh]['Emissions|Kyoto gases|Fossil|CO2|Heat|Biomass|CCS']  
            var[sh]['Emissions|Kyoto gases|Fossil|CO2|Heat|Solid bio and waste|Primary solid biomass|CCS'] = var[sh]['Emissions|Kyoto gases|Fossil|CO2|Heat|Solid bio and waste|CCS']  


            #Emissions :Natural gas

            var[sh]['Emissions|Kyoto gases|Fossil|CO2|Heat|Gases|Fossil|Natural Gas'] = 0.001*ct*(n.links_t.p3.filter(like ='gas CHP').filter(like =country)).sum().sum()          
            var[sh]['Emissions|Kyoto gases|Fossil|CO2|Heat|Gases|Fossil|Natural Gas|CCS'] = 0.001*ct*(n.links_t.p3.filter(like ='gas CHP CC').filter(like =country)).sum().sum()                       
            var[sh]['Emissions|Kyoto gases|Fossil|CO2|Heat|Gases|Fossil|Natural Gas'] += 0.001*ct* (n.links_t.p2.filter(like ='gas boiler').filter(like =country)).sum().sum()
            
            #Emissions : Oil
 
            var[sh]['Emissions|Kyoto gases|Fossil|CO2|Heat|Liquids|Fossil'] = 0.001*ct*(n.links_t.p2.filter(like ='oil boiler').filter(like =country)).sum().sum() 
            

            
            ###Energy generation: total,peaks,and percentiles
            
            sheet_var={"Yearly_generation_supply":'Generation|Yearly',"Winter_peak_generation":'Generation|Winter peak',"summer_peak_generation":'Generation|Summer peak',\
                       "Percentile50_generation":'Generation|Percentile 50',"Percentile25_generation":'Generation|Percentile 25',\
                       'Percentile_25_consumpt':'Hourly power consumption|Percentile 25','Percentile_50_consumpt':'Hourly power consumption|Percentile 50','Summer_peak_consumpt' :'Hourly power consumption|Summer peak',\
                       'Winter_peak_consumpt':'Hourly power consumption|Winter peak'}
            
            ct=3        # Hourly resolution 
        
            for sheet in sheets.keys(): 
             if sheet in ("Yearly_generation_supply","Winter_peak_generation","summer_peak_generation","Percentile50_generation","Percentile25_generation"):
              sh=sheets[sheet]
               
              #Energy generation : Solar PV (rooftop, ground)   
            
              var[sh][sheet_var[sheet]+'|Electricity|Solar|Rooftop PV'] = 0.001*ct*gen_des(time(n.generators_t.p.filter(like ='solar rooftop').filter(like =country).sum(axis=1)))
              var[sh][sheet_var[sheet]+'|Heat|Solar'] = 0.001*ct*gen_des(time(n.generators_t.p.filter(like ='solar thermal').filter(like =country).sum(axis=1)))
              var[sh][sheet_var[sheet]+'|Electricity|Solar|Open field'] = 0.001*ct*gen_des(time(n.generators_t.p.filter(like ='solar').filter(like =country).sum(axis=1)))\
              -var[sh][sheet_var[sheet]+'|Heat|Solar']-var[sh][sheet_var[sheet]+'|Electricity|Solar|Rooftop PV']
              var[sh][sheet_var[sheet]+'|Electricity|Solar'] =var[sh][sheet_var[sheet]+'|Electricity|Solar|Open field']+var[sh][sheet_var[sheet]+'|Electricity|Solar|Rooftop PV']
             
              #Energy generation :  onshore and offshore wind   
             
              var[sh][sheet_var[sheet]+'|Electricity|Wind|Onshore']=0.001*ct*gen_des(time(n.generators_t.p.filter(like ='onwind').filter(like =country).sum(axis=1))) 
              var[sh][sheet_var[sheet]+'|Electricity|Wind|Offshore']=0.001*ct*gen_des(time(n.generators_t.p.filter(like ='offwind').filter(like =country).sum(axis=1))) 
              var[sh][sheet_var[sheet]+'|Electricity|Wind']=var[sh][sheet_var[sheet]+'|Electricity|Wind|Onshore']+var[sh][sheet_var[sheet]+'|Electricity|Wind|Offshore']
             
              #Energy generation : Nuclear
            
              var[sh][sheet_var[sheet]+'|Electricity|Nuclear'] =0.001*ct*gen_des(time((n.links_t.p1.filter(like ='nuclear').filter(like =country)).sum(axis=1)))
          

              #Energy generation :  Coal (Lignite)        
                                                           
              var[sh][sheet_var[sheet]+'|Electricity|Coal|Brown Coal|Lignite'] = 0.001*ct*gen_des(time((n.links_t.p1.filter(like ='lignite').filter(like =country)).sum(axis=1)))
              var[sh][sheet_var[sheet]+'|Electricity|Coal|Brown Coal'] =var[sh][sheet_var[sheet]+'|Electricity|Coal|Brown Coal|Lignite'] 
            
              var[sh][sheet_var[sheet]+'|Electricity|Coal'] = 0.001*ct*gen_des(time((n.links_t.p1.filter(like ='coal').filter(like =country)).sum(axis=1))) + var[sh][sheet_var[sheet]+'|Electricity|Coal|Brown Coal']                                                    
 
              #Energy generation : Natural gas(OCGT, CCGT, CHP, CHP CC)       
                                                                 
              var[sh][sheet_var[sheet]+'|Electricity|Gases|Fossil|Natural gas'] = 0.001*ct*gen_des(time((n.links_t.p1.filter(like ='gas CHP').filter(like =country)).sum(axis=1)))
              var[sh][sheet_var[sheet]+'|Electricity|Gases|Fossil|Natural gas'] += 0.001*ct*gen_des(time( (n.links_t.p1.filter(like ='OCGT').filter(like =country)).sum(axis=1)))
              var[sh][sheet_var[sheet]+'|Electricity|Gases|Fossil|Natural gas'] += 0.001*ct*gen_des(time((n.links_t.p1.filter(like ='CCGT').filter(like =country)).sum(axis=1)))
              var[sh][sheet_var[sheet]+'|Electricity|Gases|Fossil|Natural gas|CCS'] = 0.001*ct*gen_des(time((n.links_t.p1.filter(like ='gas CHP CC').filter(like =country)).sum(axis=1)))
            
              #Energy generation :Biomass (CCS)
                                                                 
              var[sh][sheet_var[sheet]+'|Electricity|Solid bio and waste|Primary solid biomass'] = 0.001*ct*gen_des(time((n.links_t.p1.filter(like ='solid biomass CHP').filter(like =country)).sum(axis=1))) 
              var[sh][sheet_var[sheet]+'|Electricity|Solid bio and waste'] = var[sh][sheet_var[sheet]+'|Electricity|Solid bio and waste|Primary solid biomass']
              var[sh][sheet_var[sheet]+'|Electricty|Biomass'] = var[sh][sheet_var[sheet]+'|Electricity|Solid bio and waste']
            
              var[sh][sheet_var[sheet]+'|Electricity|Solid bio and waste|Primary solid biomass|CCS'] = 0.001*ct*gen_des(time((n.links_t.p1.filter(like ='solid biomass CHP CC').filter(like =country)).sum(axis=1)))            
              var[sh][sheet_var[sheet]+'|Electricity|Solid bio and waste|CCS'] = var[sh][sheet_var[sheet]+'|Electricity|Solid bio and waste|Primary solid biomass|CCS']
              var[sh][sheet_var[sheet]+'|Electricty|Biomass|CCS'] = var[sh][sheet_var[sheet]+'|Electricity|Solid bio and waste|CCS']            
           
              #Energy generation : Hydrogen
            
              var[sh][sheet_var[sheet]+'|Electricity|Gases|Hydrogen'] = 0.001*ct*gen_des(time((n.links_t.p1.filter(like ='H2 Fuel Cell').filter(like =country)).sum(axis=1)))

              #Energy generation : Oil 

              var[sh][sheet_var[sheet]+'|Electricity|Liquids|Fossil'] = 0.001*ct*gen_des(time((n.links_t.p1.filter(like ='oil-').filter(like =country)).sum(axis=1)))

              #Energy generation : Power to gas 
              
              var[sh][sheet_var[sheet]+'|P2G|Electricity'] = 0.001*ct*gen_des(time(n.links_t.p1.filter(like ='Sabatier').filter(like =country).sum(axis=1)))
              var[sh][sheet_var[sheet]+'|P2G|Electricity']+= 0.001*ct*gen_des(time(n.links_t.p1.filter(like ='helmeth').filter(like =country).sum(axis=1))) 
              var[sh][sheet_var[sheet]+'|P2G|Electricity']+= 0.001*ct*gen_des(time(n.links_t.p1.filter(like ='H2 Electrolysis').filter(like =country).sum(axis=1)))
              var[sh][sheet_var[sheet]+'|P2G|Electricity']+= 0.001*ct*gen_des(time(n.links_t.p1.filter(like ='Fischer-Tropsch').filter(like =country).sum(axis=1)))               
              
            
              #Energy generation : hydro (reservoir, ror)

              var[sh][sheet_var[sheet]+'|Electricity|Hydro|river'] = 0.001*ct*gen_des(time(n.generators_t.p.filter(like ='ror').filter(like =country).sum(axis=1)))
              var[sh][sheet_var[sheet]+'|Electricity|Hydro|dam'] = 0.001*ct*gen_des(time(n.storage_units_t.p.filter(like ='hydro').filter(like =country).sum(axis=1)))
              var[sh][sheet_var[sheet]+'|Electricity|Hydro'] = var[sh][sheet_var[sheet]+'|Electricity|Hydro|river']+var[sh][sheet_var[sheet]+'|Electricity|Hydro|dam']
           
              #Energy generation : storage (PHS, battery, H2 storage)

              var[sh][sheet_var[sheet]+'|Flexibility|Electricity Storage|Medium duration'] = 0.001*ct*(gen_des(time(n.storage_units_t.p.filter(like ='PHS').filter(like =country).sum(axis=1)))+\
               gen_des(time(n.stores_t.p.filter(like ='H2').filter(like =country).sum(axis=1))))
            
              var[sh][sheet_var[sheet]+'|Flexibility|Electricity Storage|Short duration'] = 0.001*ct*(gen_des(time(n.stores_t.p.filter(like ='battery').filter(like =country).sum(axis=1)))+\
               gen_des(time(n.stores_t.p.filter(like ='Li ion').filter(like =country).sum(axis=1))))
            
              var[sh][sheet_var[sheet]+'|Flexibility|Electricity Storage'] =  var[sh][sheet_var[sheet]+'|Flexibility|Electricity Storage|Medium duration']+\
              var[sh][sheet_var[sheet]+'|Flexibility|Electricity Storage|Short duration']
            
              #Energy generation : Interconnect 

              var[sh][sheet_var[sheet]+'|Flexibility|Interconnect Importing Capacity'] = 0.001*ct*(gen_des(time(abs(n.lines_t.p1[[i for i in n.lines.index if country in n.lines.bus0[i] or country in n.lines.bus1[i]]]).sum(axis=1)))+\
              gen_des(time(abs(n.links_t.p1[[i for i in n.links.index if 'DC' in n.links.carrier[i] and ((country in n.links.bus0[i]) is not (country in n.links.bus1[i]))]]).sum(axis=1))))
                      

              ### Heat  (MW -> GW)
            
              #Energy generation :Biomass (CCS)

              var[sh][sheet_var[sheet]+'|Heat|Biomass'] = 0.001*ct*gen_des(time((n.links_t.p2.filter(like ='solid biomass CHP').filter(like =country)).sum(axis=1)))
              var[sh][sheet_var[sheet]+'|Heat|Solid bio and waste'] = var[sh][sheet_var[sheet]+'|Heat|Biomass']  
              var[sh][sheet_var[sheet]+'|Heat|Solid bio and waste|Primary solid biomass'] = var[sh][sheet_var[sheet]+'|Heat|Solid bio and waste']  
            
              var[sh][sheet_var[sheet]+'|Heat|Biomass|CCS'] = 0.001*ct*gen_des(time((n.links_t.p2.filter(like ='solid biomass CHP CC').filter(like =country)).sum(axis=1)))
              var[sh][sheet_var[sheet]+'|Heat|Solid bio and waste|CCS'] = var[sh][sheet_var[sheet]+'|Heat|Biomass|CCS']  
              var[sh][sheet_var[sheet]+'|Heat|Solid bio and waste|Primary solid biomass|CCS'] = var[sh][sheet_var[sheet]+'|Heat|Solid bio and waste|CCS']  
          
              #Energy generation :Electricity (Resistive heater, heat pump)
            
              var[sh][sheet_var[sheet]+'|Heat|Electricity|Direct'] = 0.001*ct*gen_des(time((n.links_t.p1.filter(like ='resistive heater').filter(like =country)).sum(axis=1)))
              var[sh][sheet_var[sheet]+'|Heat|Electricity|Heat pump'] = 0.001*ct*gen_des(time((n.links_t.p1.filter(like ='heat pump').filter(like =country)).sum(axis=1)))
              var[sh][sheet_var[sheet]+'|Heat|Electricity']=var[sh][sheet_var[sheet]+'|Heat|Electricity|Direct']+\
              var[sh][sheet_var[sheet]+'|Heat|Electricity|Heat pump']

              #Energy generation :Natural gas

              var[sh][sheet_var[sheet]+'|Heat|Gases|Fossil|Natural Gas'] = 0.001*ct*gen_des(time((n.links_t.p2.filter(like ='gas CHP').filter(like =country)).sum(axis=1)))          
              var[sh][sheet_var[sheet]+'|Heat|Gases|Fossil|Natural Gas'] += 0.001*ct*gen_des(time( (n.links_t.p1.filter(like ='gas boiler').filter(like =country)).sum(axis=1)))
            
              var[sh][sheet_var[sheet]+'|Heat|Gases|Fossil|Natural Gas|CCS'] = 0.001*ct*gen_des(time((n.links_t.p2.filter(like ='gas CHP CC').filter(like =country)).sum(axis=1)))            
            
              #Energy generation :Hydrogen
            
              var[sh][sheet_var[sheet]+'|Heat|Gases|Hydrogen'] = 0.001*ct*gen_des(time((n.links_t.p2.filter(like ='H2 Fuel Cell').filter(like =country)).sum(axis=1)))   
              var[sh][sheet_var[sheet]+'|Heat|Gases|Hydrogen'] += 0.001*ct*gen_des(time((n.links_t.p3.filter(like ='Fischer-Tropsch').filter(like =country)).sum(axis=1)))     
            

              #Energy generation : Oil
 
              var[sh][sheet_var[sheet]+'|Heat|Liquids|Fossil'] = 0.001*ct*gen_des(time((n.links_t.p1.filter(like ='oil boiler').filter(like =country)).sum(axis=1))) 
            
                                                
              # Hydrogen Energy generation  (MW -> GW) 

              var[sh][sheet_var[sheet]+'|Hydrogen|Electricity'] = 0.001*ct*gen_des(time((n.links_t.p1.filter(like ='H2 Electrolysis').filter(like =country)).sum(axis=1)))                   
            
              var[sh][sheet_var[sheet]+'|Hydrogen|Gasses|Fossil|Natural gas'] = 0.001*ct*gen_des(time((n.links_t.p1.filter(like ='SMR').filter(like =country)).sum(axis=1)))
            
              var[sh][sheet_var[sheet]+'|Hydrogen|Gasses|Fossil|Natural gas|CCS'] = 0.001*ct*gen_des(time((n.links_t.p1.filter(like ='SMR CC').filter(like =country)).sum(axis=1)))            
            
              var[sh][sheet_var[sheet]+'|Hydrogen'] = var[sh][sheet_var[sheet]+'|Hydrogen|Electricity']+\
              var[sh][sheet_var[sheet]+'|Hydrogen|Gasses|Fossil|Natural gas']+var[sh][sheet_var[sheet]+'|Hydrogen|Gasses|Fossil|Natural gas|CCS']
             
                         
             if sheet in ("Percentile_25_consumpt","Percentile_50_consumpt","Summer_peak_consumpt",\
                             "Winter_peak_consumpt") :
              sh=sheets[sheet]
            
              #Hourly power consumption : Buildings, Industry, Transportation  
            
              var[sh][sheet_var[sheet]+'|Electricity'] = 0.001*ct*gen_des(time((n.loads_t.p[[i for i in n.loads.index if i=='FR'+'0 0']]).squeeze()))
              var[sh][sheet_var[sheet]+'|Buildings|Heating'] = 0.001*ct*gen_des(time(n.loads_t.p.filter(like ='heat').filter(like=country).sum(axis=1)))
              var[sh][sheet_var[sheet]+'|Buildings|Residential|Heating'] = 0.001*ct*gen_des(time(n.loads_t.p.filter(like ='heat').filter(like='residential').filter(like=country).sum(axis=1)))
              var[sh][sheet_var[sheet]+'|Buildings|Services|Heating'] = 0.001*ct*gen_des(time(n.loads_t.p.filter(like='heat').filter(like ='services').filter(like=country).sum(axis=1)))
            
              var[sh][sheet_var[sheet]+'|Industries|Electricity'] = 0.001*ct*gen_des(time(n.loads_t.p.filter(like ='industry electricity').filter(like =country).sum(axis=1).squeeze()))
              var[sh][sheet_var[sheet]+'|Transportation'] = (0.001*ct*(gen_des(time(n.loads_t.p.filter(like ='transport').filter(like =country).sum(axis=1)))
                +gen_des(time(n.loads_t.p.filter(like ='shipping').filter(like =country).sum(axis=1)))))
                                      
            ### Efficiency
            sh=sheets["Efficiency_supply"]  
            ct=3.6e-3    #convert MWh to TJ
                  
            
            #Efficiency : Nuclear,Coal (Lignite),Natural gas(OCGT, CCGT, CHP, CHP CC),Biomass (CCS),Hydrogen,Oil  
            
            for v in var[sheets['fuel_consumption_supply']].keys() :  #For values where output power and fuel is already calculated
                var[sh][v.replace('Fuel consumption','Efficiency')]=ct*var[sheets['Yearly_generation_supply']][v.replace('Fuel consumption','Generation|Yearly')]\
                                                                        /var[sheets['fuel_consumption_supply']][v]
            
             #Efficiency : hydro (reservoir, ror)

            var[sh]['Efficiency|Electricity|Hydro|river'] = n.generators.efficiency.filter(like ='ror').filter(like =country).mean()
            var[sh]['Efficiency|Electricity|Hydro|dam'] = n.storage_units.efficiency_dispatch.filter(like ='hydro').filter(like =country).mean()
            var[sh]['Efficiency|Electricity|Hydro'] = var[sh]['Efficiency|Electricity|Hydro|dam']   #currently equal in the model since eff(dam)=eff(river)
             
                
             #Efficiency : storage (PHS, battery, H2 storage)   
            
            var[sh]['Efficiency|Flexibility|Electricity Storage|Medium duration'] = (
                  (n.storage_units.efficiency_dispatch.filter(like ='PHS').filter(like =country).mean()*n.storage_units.efficiency_store.filter(like ='PHS').filter(like =country).mean()+
                  n.links.efficiency.filter(like ='H2 Electrolysis').filter(like =country).mean()*n.links.efficiency.filter(like ='H2 Fuel Cell').filter(like =country).mean())/2)
            
            var[sh]['Efficiency|Flexibility|Electricity Storage|Short duration'] = (n.links.efficiency.filter(like ='battery charger').filter(like =country).mean()
              *n.links.efficiency.filter(like ='battery discharger').filter(like =country).mean())
            
            var[sh]['Efficiency|Flexibility|Electricity Storage'] =  (var[sh]['Efficiency|Flexibility|Electricity Storage|Medium duration']+
            var[sh]['Efficiency|Flexibility|Electricity Storage|Short duration'])/2
               

             #Efficiency :Electricity (Resistive heater, heat pump)
           
            var[sh]['Efficiency|Heat|Electricity|Direct'] = (var[sheets['Yearly_generation_supply']]['Generation|Yearly|Heat|Electricity|Direct']
             /(0.001*ct*n.links_t.p0.filter(like ='resistive heater').filter(like =country).sum().sum()))
            var[sh]['Efficiency|Heat|Electricity|Heat pump'] = (var[sheets['Yearly_generation_supply']]['Generation|Yearly|Heat|Electricity|Heat pump']
             /(0.001*ct*n.links_t.p0.filter(like ='heat pump').filter(like =country).sum().sum()))
            var[sh]['Efficiency|Heat|Electricity']=((var[sheets['Yearly_generation_supply']]['Generation|Yearly|Heat|Electricity|Direct']+var[sheets['Yearly_generation_supply']]['Generation|Yearly|Heat|Electricity|Heat pump'])
             /(0.001*ct*(n.links_t.p0.filter(like ='resistive heater').filter(like =country).sum().sum()+n.links_t.p0.filter(like ='heat pump').filter(like =country).sum().sum())))

                                                
             # Hydrogen Efficiency   

            var[sh]['Efficiency|Hydrogen|Electricity'] = (var[sheets['Yearly_generation_supply']]['Generation|Yearly|Hydrogen|Electricity']
                 /(0.001*ct*n.links_t.p0.filter(like ='H2 Electrolysis').filter(like =country).sum().sum()))                  
            
            var[sh]['Efficiency|Hydrogen|Gasses|Fossil|Natural gas'] =(var[sheets['Yearly_generation_supply']]['Generation|Yearly|Hydrogen|Gasses|Fossil|Natural gas']
                /(0.001*ct*(n.links_t.p0.filter(like ='SMR').filter(like =country)).sum().sum()))
            
            var[sh]['Efficiency|Hydrogen|Gasses|Fossil|Natural gas|CCS'] = (var[sheets['Yearly_generation_supply']]['Generation|Yearly|Hydrogen|Gasses|Fossil|Natural gas|CCS']
                /(0.001*ct*(n.links_t.p0.filter(like ='SMR CC').filter(like =country)).sum().sum()))           
            
  
             
            ###Energy consumption
            sh=sheets["Demand_final_energy"]  
            ct=3   
            
            var[sh]['Final energy consumption|Industries|Gases|Hydrogen'] = 0.001*ct*(n.loads_t.p.filter(like ='H2 for industry').filter(like =country).sum().sum())
            var[sh]['Final energy consumption|Industries|Direct heating'] = 0.001*ct*(n.loads_t.p.filter(like ='low-temperature heat for industry').filter(like =country).sum().sum())
            var[sh]['Final energy consumption|Industries|Electricity'] = 0.001*ct*(n.loads_t.p.filter(like ='industry electricity').filter(like =country).sum().sum())                                                                                                                                                                                                                                                   
                                                                                           
            var[sh]['Final energy consumption|Transportation|Road|Gases|Hydrogen'] = 0.001*ct*(n.loads_t.p.filter(like ='land transport fuel cell').filter(like =country).sum().sum())                                                               
            var[sh]['Final energy consumption|Transportation|Gases|Hydrogen'] = (0.001*ct*(n.loads_t.p.filter(like ='H2 for shipping').filter(like =country).sum().sum())
                  +var[sh]['Final energy consumption|Transportation|Road|Gases|Hydrogen']) 
                                                                               
            var[sh]['Final energy consumption|Transportation|Road|Liquids|Fossil'] = 0.001*ct*(n.loads_t.p.filter(like ='land transport oil').filter(like =country).sum().sum())                                                               
            var[sh]['Final energy consumption|Transportation|Liquids|Fossil'] = (0.001*ct*(n.loads_t.p.filter(like ='shipping oil').filter(like =country).sum().sum())
                  +var[sh]['Final energy consumption|Transportation|Road|Liquids|Fossil'])

            var[sh]['Final energy consumption|Transportation|Electricity'] = 0.001*ct*(n.loads_t.p.filter(like ='land transport EV').filter(like =country).sum().sum())                                                               
                                                                               
            var[sh]['Final energy consumption|Electricity'] = (0.001*ct*(n.loads_t.p[[i for i in n.loads.index if i==country+'0 0']].sum().sum())
                  +var[sh]['Final energy consumption|Transportation|Electricity']+var[sh]['Final energy consumption|Industries|Electricity'])
            var[sh]['Final energy consumption|Gases|Hydrogen'] = (var[sh]['Final energy consumption|Industries|Gases|Hydrogen']
                  +var[sh]['Final energy consumption|Transportation|Gases|Hydrogen'])

                                                                               
            var[sh]['Final energy consumption|Buildings|Heating|District heating'] = 0.001*ct*(n.loads_t.p.filter(like ='urban central heat').filter(like =country).sum().sum())   
            var[sh]['Final energy consumption|District heating']=var[sh]['Final energy consumption|Buildings|Heating|District heating']                                                       
            var[sh]['Final energy consumption|Buildings|Heating'] = 0.001*ct*(n.loads_t.p.filter(like ='residential rural heat').filter(like =country).sum().sum()
                  +n.loads_t.p.filter(like ='services rural heat').filter(like =country).sum().sum()+n.loads_t.p.filter(like ='residential urban decentral heat').filter(like =country).sum().sum()                                              
                  +n.loads_t.p.filter(like ='services urban decentral heat').filter(like =country).sum().sum()+ var[sh]['Final energy consumption|District heating'] )                                 
                                                                               
                 #add residential/services water/space heating demand if we have them                                                   
                 #add for industrial energy demand table (resources)
                                                                               
            if country is 'EU' :
                var[sh]['Final energy consumption|Coal|Brown Coal|Lignite'] = 0.001*ct*(n.generators_t.p.filter(like ='EU lignite').sum().sum())                                                              
                var[sh]['Final energy consumption|Coal'] = 0.001*ct*(n.generators_t.p.filter(like ='EU coal').sum().sum())+\
                   var[sh]['Final energy consumption|Coal|Brown Coal|Lignite']
                var[sh]['Final energy consumption|Gases|Fossil|Natural Gas'] = 0.001*ct*(n.generators_t.p.filter(like ='EU gas').sum().sum())                                                                              
                var[sh]['Final energy consumption|Gases|Bio'] = 0.001*ct*(n.links_t.p0.filter(like ='EU biogas to gas').sum().sum() )
                var[sh]['Final energy consumption|Solid bio and waste|Primary solid biomass'] = 0.001*ct*(n.links_t.p0.filter(like ='EU solid biomass').sum().sum()) 
                var[sh]['Final energy consumption|Solid bio and waste']=var[sh]['Final energy consumption|Solid bio and waste|Primary solid biomass']    
                                                                                  
             #add EU process emissions?             
            
            #print(country)
            col=[]
            for sheet in sheets.keys() :
             sh=sheets[sheet]      
             col=[c for c in ds[sh][1] if c.value=='Y_'+str(year_sub)][0].column
             for v in var[sh].keys():
                ro=[r for r in ds[sh]['D'] if r.value==v][0].row
                ds[sh].cell(row=ro, column=col).value = round(var[sh][v],3)
                if country in EU:
                   ds_eu[sh].cell(row=ro, column=col).value += round(var[sh][v],3)
                ds[sh].cell(row=ro, column=1).value = model
                ds[sh].cell(row=ro, column=2).value = scenario
                ds[sh].cell(row=ro, column=3).value = country #region

     #add formulas to original excel for total electricity and heat 

                
    file.save("IAM_{}.xlsx".format(scenario))
